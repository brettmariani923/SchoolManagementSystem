You are tasked with designing a school management system in C#. The system should support the following:

Students
Teachers
Courses
School

Please design an application to represent these entities and establish the appropriate relationships between them.

---------------------------------------------------------------------------------------------------------------------------------------------------

SCHOOL----> TEACHERS ----> COURSES 
	\-----> STUDENTS ----> ENROLL ---> COURSES
	 \-----> COURSES -----> STUDENTS

many to many for enrollments

Schools have teachers, teachers teach courses
Schools have students, students enroll in courses
Schools have courses, courses have students

By setting it up this way we define the order of the relationships in the school: The School's teachers teach students who enroll in courses.
By usings SchoolID for all tables, we can connect and organize the secondary components of the school reltionships under the primary 
one (ultimately each category belongs first and foremost to the school it happens in). By using schoolID we also open up the possiblity of adding
other schools later on.

So we will have 5 different tables
1.Courses
2.School
3.Students
4.Teachers
5.Enrollments

	Courses
		-CourseID 
		-Course Name
		-Credits
		-SchoolID 

	School
		-SchoolID
		-Name
		-Street1
		-Street2
		-City
		-State

	Students
		-StudentID
		-Student First Name
		-Student Last Name
		-SchoolID

	Teachers
		-TeacherID
		-Teacher First Name
		-Teaacher Last Name
		-SchoolID

	Enrollments
		-EnrollmentID
		-StudentID
		-CourseID
		-SchoolID
		-TeacherID
		
Entity / Object

Student
	-Create
		-Create student x
		-Create students x
	-Read
		-Get all students x
		-Get student by id x
	-Update
		-Update student info x
		-update students info x
	-Delete
		-remove student x
		-remove students x

	REST
		-Post /student
		-Post / students/(list of ids)

		-Get / student/{studentID}
		-Get /students

		-Put /student/{studentID}
		-Put /students/ (list of ids)

		-Delete /student/{studentID}
		-Delete /students/ (list of ids)

Teacher
	-Create
		-Create teacher x
		-Create teachers x
	-Read
		-Get all teachers x
		-Get teaacher by id x
	-Update
		-update teacher info x
		-update teachers info x
	-Delete
		-Remove teacher x
		-Remove teachers x

	REST

		-post /teacher

		-get /teachers
		-get /teacher/{teacherid}

		-put /teacher/{teacherid}

		-delete teacher/{teacherid}

Course
	-Create
		-Create course x
		-Create courses x
	-Read
		-Get all courses x
		-Get course by id x
	-Update
		-update course info x
		-update courses info x
	-Delete
		-remove course x
		-remove courses x

	REST
		-post /course

		-get /courses
		-get /course/{courseid}

		-put /course/{courseid}

		-delete /course/{courseid}

Enrollment
	-Create
		-Enroll student x
		-Enroll students x
	-Read
		-Get all enrollments  x
		-get enrollment by id x
		-get enrollments for a student x
		-get enrollments for a course x
		-get enrollments for a teacher 
	-Update
		-update enrollment info x
		-updat bulk enrollments x
	-Delete
		-Remove an enrollment x
		-remove bulk enrollments x
	REST
		-POST /Enrollment/{studentid, course id, etc}
		-post /enrollments/(list of ids)

		-Get /enrollments
		-Get /enrollment/{enrollmentid}

		-get /student/{studentid}/enrollments
		-get /course/{courseid}/enrollments

		-put /enrollments/{enrollmentid}
		-delete /enrollments/{enrollmentid}
	
	
	DataAccess / Interfaces

	-We will need a way to CRUD records individually (transfer students entering school, expulsions, skipping a grade, held back, etc.)
	-We will need a way to CRUD records as a list (new school year, new wave of students coming and going through different years, graduating, entering freshman class, etc.)
	-Will use an interface to abstract SQL and Parameters before execution with DataBase (security)
	-Helper method to open connection string only when interacting with the database (security)

	Helper

		-HandleRequest: a reuseable wrapper for opening the connection, executing the dapper queries, and returning the results (security)

	Interfaces

		-IDataAccess
			-Provides framework for how data access should interact with the database: execution, fetch, and fetchlist
			-For the pattern we are using, we want to separate what the code does (interface) from how it does it (implementation) 
			 so we need to abstract out raw SQL execution using different types of requests and this helpps do that.

		-IDataExecute
			-Similar to IDataAccess, only difference is this handles other Crud Functions that dont return a response object
			
		-IDataFetch
			- implemented for SQL queries that will return a single/record object

		-IDataFetchList
			- implemented for SQL queries that will return a collection of records/ objects

		-IDataRequest
			- Makes it so every datarequest must use getsql() for the sql statment to execute
			- getparameters() is for parameters the query will need, if no parameters will return a null

		-IDbConnectionFactory
			-This will define the factory pattern we use that returns the IDbConnection we use to connect to the database
			-helps with privacy and security

	DataAccess

		-DataAccess methods

			-Dappers ExecuteAsync to execute sql statments that dont return objects

				-needs to internally run the command, will use ExecuteAsync() to return how many rows are effected.
				-Used to insert, update, or delete SQL statments
				-Accepts IDataExecute request object
				-will call request.GetSql() and request.Parameters() to abstract the SQL query and parameters
				-Will use HandleRequest to oppen connection string
		
			-Method to fetch a single record from the database (FetchAsync<TResponse>)

				-will use Dappers QueryFirstORDeafultAsync<T> to return one object or null if not found
				-will use HandleRequest to open connection string

			-Method to fetch a collection of records from the database (FetchListAsync<TResponse>)

				-will use Dappers QueryAsync<T>() to run the SQL and return the collection
				-will use HandleRequest to open connection string

		-SqlConnectionFactory

			-This class will implement IDbConnectionFactory in order to encapsulate the SqlConnection that is created and returned as an IDbConnection using this Factory class.
